{"mappings":"AAAA,MAAM,8BAA8B,CAAC;IACjC,OAAQ;QACJ,KAAK;YACD,OAAO;QACX,KAAK;YACD,OAAO;QACX;YACI,OAAO;IACf;AACJ;AAEA,MAAM,QAAQ;IACV,eAAe,CAAC,KAAK,OAAO,GAAG;QAC3B,IAAI,OAAO,QAAQ,YACf,OAAO,IAAI;QAGf,wCAAwC;QACxC,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,WAAW,GAAG;QAE3C,MAAM,UAAU;YACZ;YACA,OAAO;gBACH,GAAG,SAAS;gBACZ;YACJ;QACJ;QAEA,OAAO;IACX;IACA,UAAS,YAAY;QACjB,IAAI,QAAQ;QAEZ,SAAS,SAAS,QAAQ;YACtB,QAAQ,IAAI,2BAA2B;QAC3C;QAEA,OAAO;YAAC;YAAO;SAAS;IAC5B;AACJ;AAEA,MAAM,WAAW;IACb,QAAQ,CAAC,SAAS;QACd,qBAAqB;QACrB,MAAM,aAA0B,SAAS,cAAc,QAAQ;QAE/D,qDAAqD;QACrD,IAAI;YAAC;YAAU;SAAS,CAAC,SAAS,OAAO,UACrC,OAAO,UAAU,YAAY,SAAS,eAAe;QAGzD,MAAM,EAAE,QAAQ,EAAE,GAAG,WAAW,GAAG,QAAQ;QAE3C,gCAAgC;QAChC,OAAO,KAAK,WAAW,QAAQ,CAAC;YAC5B,IAAI,OAAO,SAAS,CAAC,KAAK,KAAK,YAC3B,WAAW,iBACP,4BAA4B,OAC5B,SAAS,CAAC,KAAK;YAGvB,WAAW,aAAa,MAAM,SAAS,CAAC,KAAK;QACjD;QAEA,8BAA8B;QAC9B,SAAS,QAAQ,CAAC,QAAU,SAAS,OAAO,OAAO;QAEnD,UAAU,YAAY;IAC1B;AACJ;AAEA,6BAA6B,GAC7B,MAAM,EAAE,QAAQ,EAAE,GAAG;AACrB,MAAM,EAAE,MAAM,EAAE,GAAG;AAEnB,MAAM,QAAQ;IACV,MAAM,CAAC,MAAM,QAAQ,GAAG,SAAS;IAEjC,qBACI,oBAAC;;;;;;;qBACG,oBAAC;;;;;;;qBACG,oBAAC;QAAO,SAAS,IAAM,QAAQ,IAAI;;;;;;;OAAY,4BAEnD,oBAAC;QACG,aAAY;QACZ,MAAK;QACL,OAAO;QACP,UAAU,CAAC,IAAM,QAAQ,EAAE,OAAO;;;;;;;sBAEtC,oBAAC;;;;;;;OAAG,UAAO;AAGvB;AAEA,MAAM,MAAM,kBACR,oBAAC;;;;;;;qBACG,oBAAC;;;;;;;OAAG,wBACJ,oBAAC;;;;;;;;AAIT,qBAAO,oBAAC;;;;;;;IAAU,SAAS,eAAe","sources":["src/index.tsx"],"sourcesContent":["const mapAttributeNameToEventName = (attributeName) => {\r\n    switch (attributeName) {\r\n        case \"onClick\":\r\n            return \"click\";\r\n        case \"onchange\":\r\n            return \"change\";\r\n        default:\r\n            return \"\";\r\n    }\r\n};\r\n\r\nconst React = {\r\n    createElement: (tag, props, ...children) => {\r\n        if (typeof tag === \"function\") {\r\n            return tag(props);\r\n        }\r\n\r\n        // Filter out source and self from props\r\n        const { __source, __self, ...restProps } = props;\r\n\r\n        const element = {\r\n            tag,\r\n            props: {\r\n                ...restProps,\r\n                children,\r\n            },\r\n        };\r\n\r\n        return element;\r\n    },\r\n    useState(initialState) {\r\n        let state = initialState;\r\n\r\n        function setState(newState) {\r\n            console.log(\"set state called with: \", newState);\r\n        }\r\n\r\n        return [state, setState];\r\n    },\r\n};\r\n\r\nconst ReactDOM = {\r\n    render: (element, container: HTMLElement) => {\r\n        // Create dom element\r\n        const domElement: HTMLElement = document.createElement(element.tag);\r\n\r\n        // If the element is a primitive type, add it as text\r\n        if ([\"string\", \"number\"].includes(typeof element)) {\r\n            return container.appendChild(document.createTextNode(element));\r\n        }\r\n\r\n        const { children, ...restProps } = element.props;\r\n\r\n        // Pass all props to dom element\r\n        Object.keys(restProps).forEach((prop) => {\r\n            if (typeof restProps[prop] === \"function\") {\r\n                domElement.addEventListener(\r\n                    mapAttributeNameToEventName(prop),\r\n                    restProps[prop]\r\n                );\r\n            }\r\n            domElement.setAttribute(prop, restProps[prop]);\r\n        });\r\n\r\n        // Recursively render children\r\n        children.forEach((child) => ReactDOM.render(child, domElement));\r\n\r\n        container.appendChild(domElement);\r\n    },\r\n};\r\n\r\n/***** APPLICATION START *****/\r\nconst { useState } = React;\r\nconst { render } = ReactDOM;\r\n\r\nconst Namer = () => {\r\n    const [name, setName] = useState(\"Kenny\");\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <button onClick={() => console.log(\"clicked\")}>Click me</button>\r\n            </div>\r\n            <input\r\n                placeholder=\"name\"\r\n                type=\"text\"\r\n                value={name}\r\n                onchange={(e) => setName(e.target.value)}\r\n            />\r\n            <h3>Name: {name}</h3>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst App = () => (\r\n    <div>\r\n        <h1>Hello</h1>\r\n        <Namer />\r\n    </div>\r\n);\r\n\r\nrender(<Namer />, document.getElementById(\"app\")!);\r\n"],"names":[],"version":3,"file":"index.a96c6e9e.js.map","sourceRoot":"/__parcel_source_root/"}